Metadata-Version: 2.4
Name: platform_detection
Version: 1.0.0
Summary: A comprehensive framework for detecting and optimizing computational workloads across platforms
Home-page: https://github.com/QuantJourneyOrg/platform_detection
Author: Jakub Polec
Author-email: Your Name <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/yourusername/platform_detection
Project-URL: Bug Tracker, https://github.com/yourusername/platform_detection/issues
Project-URL: Documentation, https://platform-detection.readthedocs.io
Keywords: platform,detection,optimization,compute,hardware,software
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Hardware
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: psutil>=5.8.0
Provides-Extra: full
Requires-Dist: numpy>=1.19.0; extra == "full"
Requires-Dist: pandas>=1.0.0; extra == "full"
Requires-Dist: numba>=0.50.0; extra == "full"
Requires-Dist: cython>=0.29.0; extra == "full"
Requires-Dist: cpuinfo>=8.0.0; extra == "full"
Provides-Extra: dev
Requires-Dist: pytest>=6.0.0; extra == "dev"
Requires-Dist: pytest-cov>=2.10.0; extra == "dev"
Requires-Dist: black>=21.5b2; extra == "dev"
Requires-Dist: isort>=5.9.1; extra == "dev"
Requires-Dist: flake8>=3.9.2; extra == "dev"
Requires-Dist: mypy>=0.812; extra == "dev"
Requires-Dist: sphinx>=4.0.0; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=0.5.2; extra == "dev"
Provides-Extra: gpu
Requires-Dist: cupy>=10.0.0; extra == "gpu"
Requires-Dist: torch>=1.10.0; extra == "gpu"
Provides-Extra: finance
Requires-Dist: numpy>=1.19.0; extra == "finance"
Requires-Dist: pandas>=1.0.0; extra == "finance"
Requires-Dist: numba>=0.50.0; extra == "finance"
Requires-Dist: matplotlib>=3.3.0; extra == "finance"
Requires-Dist: seaborn>=0.11.0; extra == "finance"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Platform Detection Framework

A comprehensive framework for detecting hardware, software, and OS-specific capabilities to optimize computational workloads across different platforms.

[![PyPI version](https://badge.fury.io/py/platform-detection.svg)](https://badge.fury.io/py/platform-detection)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## Features

- üöÄ **Automatic backend selection**: Optimizes computations based on available hardware and software
- üîç **Comprehensive detection**: Hardware, software, and OS-specific capabilities
- üñ•Ô∏è **Cross-platform**: Windows, macOS, and Linux support
- üßÆ **Performance-focused**: Ideal for data science, quant finance, and scientific computing
- üîå **Simple API**: Easy to integrate with existing code
- üõ†Ô∏è **Decorator-based optimization**: Add performance with minimal code changes

## Installation

```bash
pip install platform-detection
```

For additional dependencies:

```bash
pip install 'platform-detection[full]'
```

## Quick Start

### Automatic Detection

```python
from platform_detection import get_detector

# Get the detector
detector = get_detector()

# Print optimal backend
print(f"Optimal backend: {detector.get_optimal_backend()}")

# Save detection results to JSON
detector.json_dump("platform_capabilities.json")
```

### Optimize Functions with Decorators

```python
import numpy as np
import pandas as pd
from platform_detection import optimize

# Automatically use the optimal backend for matrix operations
@optimize(operation_type="matrix")
def calculate_correlation_matrix(df):
    return np.corrcoef(df.values.T)

# Specify data size estimation for more accurate backend selection
@optimize(operation_type="stat", data_size_estimator=lambda df: df.size)
def calculate_portfolio_risk(returns, weights):
    cov_matrix = returns.cov()
    return np.sqrt(weights.T @ cov_matrix @ weights)

# Financial operations use low-latency backends
@optimize(operation_type="finance")
def calculate_moving_averages(prices, windows=[20, 50, 200]):
    result = {}
    for window in windows:
        result[f'MA{window}'] = prices.rolling(window=window).mean()
    return pd.concat(result.values(), axis=1, keys=result.keys())
```

### Context Manager for Backend Selection

```python
import numpy as np
from platform_detection.backends import use_backend
from platform_detection.orchestrator import ComputeBackend

# Large matrix multiplication with CUDA (if available)
with use_backend(ComputeBackend.CUDA):
    result = np.dot(large_matrix1, large_matrix2)
```

## Command-Line Usage

```bash
# Show all detected capabilities
platform-detect

# Output as JSON
platform-detect --json

# Save to file
platform-detect --file=capabilities.json

# Show summary
platform-detect --summary
```

## Use Cases

### Quantitative Finance / Hedge Funds

- Automatically select the fastest array processing backend
- Optimize numerical computations on heterogeneous infrastructure
- Ensure consistent performance across different developer machines

### Data Science and Machine Learning

- Select appropriate backends based on data size and operation type
- Leverage platform-specific optimizations without manual tuning
- Handle transition between development and production environments

### Scientific Computing

- Make use of specialized hardware when available
- Fallback gracefully to CPU optimizations when GPUs unavailable
- Process data at different scales with optimal backends

## Documentation

For full documentation, visit [https://platform-detection.readthedocs.io](https://platform-detection.readthedocs.io).

## License

MIT License - see [LICENSE](LICENSE) for details.
